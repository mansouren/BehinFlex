//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace BehinFlex.SmsWebService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="TrezSmsServiceSoap", Namespace="http://tempuri.org/")]
    public partial class TrezSmsService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SendMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageWithUDHOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessagesWithUDHOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMultiMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageForPhpOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendOneMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessageStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendSchaduleMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendSchaduleMessageForPhpOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendCourseMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCreditOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSmsPriceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReciveMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUnReciveMessageCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendOneMessageQuicklyOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public TrezSmsService() {
            this.Url = global::BehinFlex.Properties.Settings.Default.BehinFlex_SmsWebService_TrezSmsService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SendMessageCompletedEventHandler SendMessageCompleted;
        
        /// <remarks/>
        public event SendMessageWithUDHCompletedEventHandler SendMessageWithUDHCompleted;
        
        /// <remarks/>
        public event SendMessagesWithUDHCompletedEventHandler SendMessagesWithUDHCompleted;
        
        /// <remarks/>
        public event SendMultiMessageCompletedEventHandler SendMultiMessageCompleted;
        
        /// <remarks/>
        public event SendMessageForPhpCompletedEventHandler SendMessageForPhpCompleted;
        
        /// <remarks/>
        public event SendOneMessageCompletedEventHandler SendOneMessageCompleted;
        
        /// <remarks/>
        public event GetMessageStatusCompletedEventHandler GetMessageStatusCompleted;
        
        /// <remarks/>
        public event SendSchaduleMessageCompletedEventHandler SendSchaduleMessageCompleted;
        
        /// <remarks/>
        public event SendSchaduleMessageForPhpCompletedEventHandler SendSchaduleMessageForPhpCompleted;
        
        /// <remarks/>
        public event SendCourseMessageCompletedEventHandler SendCourseMessageCompleted;
        
        /// <remarks/>
        public event GetCreditCompletedEventHandler GetCreditCompleted;
        
        /// <remarks/>
        public event GetSmsPriceCompletedEventHandler GetSmsPriceCompleted;
        
        /// <remarks/>
        public event SaveContactCompletedEventHandler SaveContactCompleted;
        
        /// <remarks/>
        public event GetReciveMessageCompletedEventHandler GetReciveMessageCompleted;
        
        /// <remarks/>
        public event GetUnReciveMessageCountCompletedEventHandler GetUnReciveMessageCountCompleted;
        
        /// <remarks/>
        public event SendOneMessageQuicklyCompletedEventHandler SendOneMessageQuicklyCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMessage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long[] SendMessage(string Username, string Passwod, string SenderNumebr, string MessageBody, string[] ReciptionNumbers, int Class, long[] UserMessageId) {
            object[] results = this.Invoke("SendMessage", new object[] {
                        Username,
                        Passwod,
                        SenderNumebr,
                        MessageBody,
                        ReciptionNumbers,
                        Class,
                        UserMessageId});
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageAsync(string Username, string Passwod, string SenderNumebr, string MessageBody, string[] ReciptionNumbers, int Class, long[] UserMessageId) {
            this.SendMessageAsync(Username, Passwod, SenderNumebr, MessageBody, ReciptionNumbers, Class, UserMessageId, null);
        }
        
        /// <remarks/>
        public void SendMessageAsync(string Username, string Passwod, string SenderNumebr, string MessageBody, string[] ReciptionNumbers, int Class, long[] UserMessageId, object userState) {
            if ((this.SendMessageOperationCompleted == null)) {
                this.SendMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageOperationCompleted);
            }
            this.InvokeAsync("SendMessage", new object[] {
                        Username,
                        Passwod,
                        SenderNumebr,
                        MessageBody,
                        ReciptionNumbers,
                        Class,
                        UserMessageId}, this.SendMessageOperationCompleted, userState);
        }
        
        private void OnSendMessageOperationCompleted(object arg) {
            if ((this.SendMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageCompleted(this, new SendMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMessageWithUDH", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long[] SendMessageWithUDH(string Username, string Passwod, string SenderNumebr, string MessageBody, string ReciptionNumbers, string UDH, int Class, long UserMessageId) {
            object[] results = this.Invoke("SendMessageWithUDH", new object[] {
                        Username,
                        Passwod,
                        SenderNumebr,
                        MessageBody,
                        ReciptionNumbers,
                        UDH,
                        Class,
                        UserMessageId});
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageWithUDHAsync(string Username, string Passwod, string SenderNumebr, string MessageBody, string ReciptionNumbers, string UDH, int Class, long UserMessageId) {
            this.SendMessageWithUDHAsync(Username, Passwod, SenderNumebr, MessageBody, ReciptionNumbers, UDH, Class, UserMessageId, null);
        }
        
        /// <remarks/>
        public void SendMessageWithUDHAsync(string Username, string Passwod, string SenderNumebr, string MessageBody, string ReciptionNumbers, string UDH, int Class, long UserMessageId, object userState) {
            if ((this.SendMessageWithUDHOperationCompleted == null)) {
                this.SendMessageWithUDHOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageWithUDHOperationCompleted);
            }
            this.InvokeAsync("SendMessageWithUDH", new object[] {
                        Username,
                        Passwod,
                        SenderNumebr,
                        MessageBody,
                        ReciptionNumbers,
                        UDH,
                        Class,
                        UserMessageId}, this.SendMessageWithUDHOperationCompleted, userState);
        }
        
        private void OnSendMessageWithUDHOperationCompleted(object arg) {
            if ((this.SendMessageWithUDHCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageWithUDHCompleted(this, new SendMessageWithUDHCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMessagesWithUDH", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long[] SendMessagesWithUDH(string Username, string Passwod, string SenderNumebr, string[] MessageBody, string[] ReciptionNumbers, string UDH, int Class, long[] UserMessageId) {
            object[] results = this.Invoke("SendMessagesWithUDH", new object[] {
                        Username,
                        Passwod,
                        SenderNumebr,
                        MessageBody,
                        ReciptionNumbers,
                        UDH,
                        Class,
                        UserMessageId});
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void SendMessagesWithUDHAsync(string Username, string Passwod, string SenderNumebr, string[] MessageBody, string[] ReciptionNumbers, string UDH, int Class, long[] UserMessageId) {
            this.SendMessagesWithUDHAsync(Username, Passwod, SenderNumebr, MessageBody, ReciptionNumbers, UDH, Class, UserMessageId, null);
        }
        
        /// <remarks/>
        public void SendMessagesWithUDHAsync(string Username, string Passwod, string SenderNumebr, string[] MessageBody, string[] ReciptionNumbers, string UDH, int Class, long[] UserMessageId, object userState) {
            if ((this.SendMessagesWithUDHOperationCompleted == null)) {
                this.SendMessagesWithUDHOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessagesWithUDHOperationCompleted);
            }
            this.InvokeAsync("SendMessagesWithUDH", new object[] {
                        Username,
                        Passwod,
                        SenderNumebr,
                        MessageBody,
                        ReciptionNumbers,
                        UDH,
                        Class,
                        UserMessageId}, this.SendMessagesWithUDHOperationCompleted, userState);
        }
        
        private void OnSendMessagesWithUDHOperationCompleted(object arg) {
            if ((this.SendMessagesWithUDHCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessagesWithUDHCompleted(this, new SendMessagesWithUDHCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMultiMessage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long[] SendMultiMessage(string Username, string Passwod, string SenderNumebr, string[] MessageBody, string[] ReciptionNumbers, int Class, long[] UserMessageId) {
            object[] results = this.Invoke("SendMultiMessage", new object[] {
                        Username,
                        Passwod,
                        SenderNumebr,
                        MessageBody,
                        ReciptionNumbers,
                        Class,
                        UserMessageId});
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void SendMultiMessageAsync(string Username, string Passwod, string SenderNumebr, string[] MessageBody, string[] ReciptionNumbers, int Class, long[] UserMessageId) {
            this.SendMultiMessageAsync(Username, Passwod, SenderNumebr, MessageBody, ReciptionNumbers, Class, UserMessageId, null);
        }
        
        /// <remarks/>
        public void SendMultiMessageAsync(string Username, string Passwod, string SenderNumebr, string[] MessageBody, string[] ReciptionNumbers, int Class, long[] UserMessageId, object userState) {
            if ((this.SendMultiMessageOperationCompleted == null)) {
                this.SendMultiMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMultiMessageOperationCompleted);
            }
            this.InvokeAsync("SendMultiMessage", new object[] {
                        Username,
                        Passwod,
                        SenderNumebr,
                        MessageBody,
                        ReciptionNumbers,
                        Class,
                        UserMessageId}, this.SendMultiMessageOperationCompleted, userState);
        }
        
        private void OnSendMultiMessageOperationCompleted(object arg) {
            if ((this.SendMultiMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMultiMessageCompleted(this, new SendMultiMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMessageForPhp", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long[] SendMessageForPhp(string Username, string Password, string SenderNumebr, string MessageBody, string ReciptionNumbers, int Class, string UserMessageId) {
            object[] results = this.Invoke("SendMessageForPhp", new object[] {
                        Username,
                        Password,
                        SenderNumebr,
                        MessageBody,
                        ReciptionNumbers,
                        Class,
                        UserMessageId});
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageForPhpAsync(string Username, string Password, string SenderNumebr, string MessageBody, string ReciptionNumbers, int Class, string UserMessageId) {
            this.SendMessageForPhpAsync(Username, Password, SenderNumebr, MessageBody, ReciptionNumbers, Class, UserMessageId, null);
        }
        
        /// <remarks/>
        public void SendMessageForPhpAsync(string Username, string Password, string SenderNumebr, string MessageBody, string ReciptionNumbers, int Class, string UserMessageId, object userState) {
            if ((this.SendMessageForPhpOperationCompleted == null)) {
                this.SendMessageForPhpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageForPhpOperationCompleted);
            }
            this.InvokeAsync("SendMessageForPhp", new object[] {
                        Username,
                        Password,
                        SenderNumebr,
                        MessageBody,
                        ReciptionNumbers,
                        Class,
                        UserMessageId}, this.SendMessageForPhpOperationCompleted, userState);
        }
        
        private void OnSendMessageForPhpOperationCompleted(object arg) {
            if ((this.SendMessageForPhpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageForPhpCompleted(this, new SendMessageForPhpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendOneMessage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long SendOneMessage(string Username, string Passwod, string SenderNumebr, string MessageBody, string ReciptionNumbers, int Class, long UserMessageId) {
            object[] results = this.Invoke("SendOneMessage", new object[] {
                        Username,
                        Passwod,
                        SenderNumebr,
                        MessageBody,
                        ReciptionNumbers,
                        Class,
                        UserMessageId});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void SendOneMessageAsync(string Username, string Passwod, string SenderNumebr, string MessageBody, string ReciptionNumbers, int Class, long UserMessageId) {
            this.SendOneMessageAsync(Username, Passwod, SenderNumebr, MessageBody, ReciptionNumbers, Class, UserMessageId, null);
        }
        
        /// <remarks/>
        public void SendOneMessageAsync(string Username, string Passwod, string SenderNumebr, string MessageBody, string ReciptionNumbers, int Class, long UserMessageId, object userState) {
            if ((this.SendOneMessageOperationCompleted == null)) {
                this.SendOneMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendOneMessageOperationCompleted);
            }
            this.InvokeAsync("SendOneMessage", new object[] {
                        Username,
                        Passwod,
                        SenderNumebr,
                        MessageBody,
                        ReciptionNumbers,
                        Class,
                        UserMessageId}, this.SendOneMessageOperationCompleted, userState);
        }
        
        private void OnSendOneMessageOperationCompleted(object arg) {
            if ((this.SendOneMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendOneMessageCompleted(this, new SendOneMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMessageStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] GetMessageStatus(string Username, string Passwod, string SenderNumebr, long[] MessageId) {
            object[] results = this.Invoke("GetMessageStatus", new object[] {
                        Username,
                        Passwod,
                        SenderNumebr,
                        MessageId});
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMessageStatusAsync(string Username, string Passwod, string SenderNumebr, long[] MessageId) {
            this.GetMessageStatusAsync(Username, Passwod, SenderNumebr, MessageId, null);
        }
        
        /// <remarks/>
        public void GetMessageStatusAsync(string Username, string Passwod, string SenderNumebr, long[] MessageId, object userState) {
            if ((this.GetMessageStatusOperationCompleted == null)) {
                this.GetMessageStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessageStatusOperationCompleted);
            }
            this.InvokeAsync("GetMessageStatus", new object[] {
                        Username,
                        Passwod,
                        SenderNumebr,
                        MessageId}, this.GetMessageStatusOperationCompleted, userState);
        }
        
        private void OnGetMessageStatusOperationCompleted(object arg) {
            if ((this.GetMessageStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessageStatusCompleted(this, new GetMessageStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendSchaduleMessage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendSchaduleMessage(string Username, string Passwod, string SenderNumebr, string MessageBody, string[] ReciptionNumbers, System.DateTime SendDate, int Class) {
            object[] results = this.Invoke("SendSchaduleMessage", new object[] {
                        Username,
                        Passwod,
                        SenderNumebr,
                        MessageBody,
                        ReciptionNumbers,
                        SendDate,
                        Class});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendSchaduleMessageAsync(string Username, string Passwod, string SenderNumebr, string MessageBody, string[] ReciptionNumbers, System.DateTime SendDate, int Class) {
            this.SendSchaduleMessageAsync(Username, Passwod, SenderNumebr, MessageBody, ReciptionNumbers, SendDate, Class, null);
        }
        
        /// <remarks/>
        public void SendSchaduleMessageAsync(string Username, string Passwod, string SenderNumebr, string MessageBody, string[] ReciptionNumbers, System.DateTime SendDate, int Class, object userState) {
            if ((this.SendSchaduleMessageOperationCompleted == null)) {
                this.SendSchaduleMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSchaduleMessageOperationCompleted);
            }
            this.InvokeAsync("SendSchaduleMessage", new object[] {
                        Username,
                        Passwod,
                        SenderNumebr,
                        MessageBody,
                        ReciptionNumbers,
                        SendDate,
                        Class}, this.SendSchaduleMessageOperationCompleted, userState);
        }
        
        private void OnSendSchaduleMessageOperationCompleted(object arg) {
            if ((this.SendSchaduleMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSchaduleMessageCompleted(this, new SendSchaduleMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendSchaduleMessageForPhp", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendSchaduleMessageForPhp(string Username, string Password, string SenderNumebr, string MessageBody, string ReciptionNumbers, System.DateTime SendDate, int Class) {
            object[] results = this.Invoke("SendSchaduleMessageForPhp", new object[] {
                        Username,
                        Password,
                        SenderNumebr,
                        MessageBody,
                        ReciptionNumbers,
                        SendDate,
                        Class});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendSchaduleMessageForPhpAsync(string Username, string Password, string SenderNumebr, string MessageBody, string ReciptionNumbers, System.DateTime SendDate, int Class) {
            this.SendSchaduleMessageForPhpAsync(Username, Password, SenderNumebr, MessageBody, ReciptionNumbers, SendDate, Class, null);
        }
        
        /// <remarks/>
        public void SendSchaduleMessageForPhpAsync(string Username, string Password, string SenderNumebr, string MessageBody, string ReciptionNumbers, System.DateTime SendDate, int Class, object userState) {
            if ((this.SendSchaduleMessageForPhpOperationCompleted == null)) {
                this.SendSchaduleMessageForPhpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSchaduleMessageForPhpOperationCompleted);
            }
            this.InvokeAsync("SendSchaduleMessageForPhp", new object[] {
                        Username,
                        Password,
                        SenderNumebr,
                        MessageBody,
                        ReciptionNumbers,
                        SendDate,
                        Class}, this.SendSchaduleMessageForPhpOperationCompleted, userState);
        }
        
        private void OnSendSchaduleMessageForPhpOperationCompleted(object arg) {
            if ((this.SendSchaduleMessageForPhpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSchaduleMessageForPhpCompleted(this, new SendSchaduleMessageForPhpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendCourseMessage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendCourseMessage(string Username, string Passwod, string SenderNumebr, string Topic, string MessageBody, string[] ReciptionNumbers, System.DateTime StartDate, System.DateTime EndDate, int Period, int Class) {
            object[] results = this.Invoke("SendCourseMessage", new object[] {
                        Username,
                        Passwod,
                        SenderNumebr,
                        Topic,
                        MessageBody,
                        ReciptionNumbers,
                        StartDate,
                        EndDate,
                        Period,
                        Class});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendCourseMessageAsync(string Username, string Passwod, string SenderNumebr, string Topic, string MessageBody, string[] ReciptionNumbers, System.DateTime StartDate, System.DateTime EndDate, int Period, int Class) {
            this.SendCourseMessageAsync(Username, Passwod, SenderNumebr, Topic, MessageBody, ReciptionNumbers, StartDate, EndDate, Period, Class, null);
        }
        
        /// <remarks/>
        public void SendCourseMessageAsync(string Username, string Passwod, string SenderNumebr, string Topic, string MessageBody, string[] ReciptionNumbers, System.DateTime StartDate, System.DateTime EndDate, int Period, int Class, object userState) {
            if ((this.SendCourseMessageOperationCompleted == null)) {
                this.SendCourseMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendCourseMessageOperationCompleted);
            }
            this.InvokeAsync("SendCourseMessage", new object[] {
                        Username,
                        Passwod,
                        SenderNumebr,
                        Topic,
                        MessageBody,
                        ReciptionNumbers,
                        StartDate,
                        EndDate,
                        Period,
                        Class}, this.SendCourseMessageOperationCompleted, userState);
        }
        
        private void OnSendCourseMessageOperationCompleted(object arg) {
            if ((this.SendCourseMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendCourseMessageCompleted(this, new SendCourseMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCredit", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long GetCredit(string Username, string Password, string SenderNumber) {
            object[] results = this.Invoke("GetCredit", new object[] {
                        Username,
                        Password,
                        SenderNumber});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void GetCreditAsync(string Username, string Password, string SenderNumber) {
            this.GetCreditAsync(Username, Password, SenderNumber, null);
        }
        
        /// <remarks/>
        public void GetCreditAsync(string Username, string Password, string SenderNumber, object userState) {
            if ((this.GetCreditOperationCompleted == null)) {
                this.GetCreditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCreditOperationCompleted);
            }
            this.InvokeAsync("GetCredit", new object[] {
                        Username,
                        Password,
                        SenderNumber}, this.GetCreditOperationCompleted, userState);
        }
        
        private void OnGetCreditOperationCompleted(object arg) {
            if ((this.GetCreditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCreditCompleted(this, new GetCreditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSmsPrice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] GetSmsPrice(string Username, string Password, string SenderNumber) {
            object[] results = this.Invoke("GetSmsPrice", new object[] {
                        Username,
                        Password,
                        SenderNumber});
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSmsPriceAsync(string Username, string Password, string SenderNumber) {
            this.GetSmsPriceAsync(Username, Password, SenderNumber, null);
        }
        
        /// <remarks/>
        public void GetSmsPriceAsync(string Username, string Password, string SenderNumber, object userState) {
            if ((this.GetSmsPriceOperationCompleted == null)) {
                this.GetSmsPriceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSmsPriceOperationCompleted);
            }
            this.InvokeAsync("GetSmsPrice", new object[] {
                        Username,
                        Password,
                        SenderNumber}, this.GetSmsPriceOperationCompleted, userState);
        }
        
        private void OnGetSmsPriceOperationCompleted(object arg) {
            if ((this.GetSmsPriceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSmsPriceCompleted(this, new GetSmsPriceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveContact", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SaveContact(string Username, string Password, string SenderNumber, string ContactName, string Mobile, string Description) {
            object[] results = this.Invoke("SaveContact", new object[] {
                        Username,
                        Password,
                        SenderNumber,
                        ContactName,
                        Mobile,
                        Description});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SaveContactAsync(string Username, string Password, string SenderNumber, string ContactName, string Mobile, string Description) {
            this.SaveContactAsync(Username, Password, SenderNumber, ContactName, Mobile, Description, null);
        }
        
        /// <remarks/>
        public void SaveContactAsync(string Username, string Password, string SenderNumber, string ContactName, string Mobile, string Description, object userState) {
            if ((this.SaveContactOperationCompleted == null)) {
                this.SaveContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveContactOperationCompleted);
            }
            this.InvokeAsync("SaveContact", new object[] {
                        Username,
                        Password,
                        SenderNumber,
                        ContactName,
                        Mobile,
                        Description}, this.SaveContactOperationCompleted, userState);
        }
        
        private void OnSaveContactOperationCompleted(object arg) {
            if ((this.SaveContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveContactCompleted(this, new SaveContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetReciveMessage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetReciveMessage(string Username, string Password, string SenderNumber) {
            object[] results = this.Invoke("GetReciveMessage", new object[] {
                        Username,
                        Password,
                        SenderNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetReciveMessageAsync(string Username, string Password, string SenderNumber) {
            this.GetReciveMessageAsync(Username, Password, SenderNumber, null);
        }
        
        /// <remarks/>
        public void GetReciveMessageAsync(string Username, string Password, string SenderNumber, object userState) {
            if ((this.GetReciveMessageOperationCompleted == null)) {
                this.GetReciveMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReciveMessageOperationCompleted);
            }
            this.InvokeAsync("GetReciveMessage", new object[] {
                        Username,
                        Password,
                        SenderNumber}, this.GetReciveMessageOperationCompleted, userState);
        }
        
        private void OnGetReciveMessageOperationCompleted(object arg) {
            if ((this.GetReciveMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReciveMessageCompleted(this, new GetReciveMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUnReciveMessageCount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetUnReciveMessageCount(string Username, string Password, string SenderNumber) {
            object[] results = this.Invoke("GetUnReciveMessageCount", new object[] {
                        Username,
                        Password,
                        SenderNumber});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetUnReciveMessageCountAsync(string Username, string Password, string SenderNumber) {
            this.GetUnReciveMessageCountAsync(Username, Password, SenderNumber, null);
        }
        
        /// <remarks/>
        public void GetUnReciveMessageCountAsync(string Username, string Password, string SenderNumber, object userState) {
            if ((this.GetUnReciveMessageCountOperationCompleted == null)) {
                this.GetUnReciveMessageCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUnReciveMessageCountOperationCompleted);
            }
            this.InvokeAsync("GetUnReciveMessageCount", new object[] {
                        Username,
                        Password,
                        SenderNumber}, this.GetUnReciveMessageCountOperationCompleted, userState);
        }
        
        private void OnGetUnReciveMessageCountOperationCompleted(object arg) {
            if ((this.GetUnReciveMessageCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUnReciveMessageCountCompleted(this, new GetUnReciveMessageCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendOneMessageQuickly", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long SendOneMessageQuickly(string Username, string Password, string SenderNumebr, string MessageBody, string ReciptionNumber) {
            object[] results = this.Invoke("SendOneMessageQuickly", new object[] {
                        Username,
                        Password,
                        SenderNumebr,
                        MessageBody,
                        ReciptionNumber});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void SendOneMessageQuicklyAsync(string Username, string Password, string SenderNumebr, string MessageBody, string ReciptionNumber) {
            this.SendOneMessageQuicklyAsync(Username, Password, SenderNumebr, MessageBody, ReciptionNumber, null);
        }
        
        /// <remarks/>
        public void SendOneMessageQuicklyAsync(string Username, string Password, string SenderNumebr, string MessageBody, string ReciptionNumber, object userState) {
            if ((this.SendOneMessageQuicklyOperationCompleted == null)) {
                this.SendOneMessageQuicklyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendOneMessageQuicklyOperationCompleted);
            }
            this.InvokeAsync("SendOneMessageQuickly", new object[] {
                        Username,
                        Password,
                        SenderNumebr,
                        MessageBody,
                        ReciptionNumber}, this.SendOneMessageQuicklyOperationCompleted, userState);
        }
        
        private void OnSendOneMessageQuicklyOperationCompleted(object arg) {
            if ((this.SendOneMessageQuicklyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendOneMessageQuicklyCompleted(this, new SendOneMessageQuicklyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void SendMessageCompletedEventHandler(object sender, SendMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void SendMessageWithUDHCompletedEventHandler(object sender, SendMessageWithUDHCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageWithUDHCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageWithUDHCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void SendMessagesWithUDHCompletedEventHandler(object sender, SendMessagesWithUDHCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessagesWithUDHCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessagesWithUDHCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void SendMultiMessageCompletedEventHandler(object sender, SendMultiMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMultiMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMultiMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void SendMessageForPhpCompletedEventHandler(object sender, SendMessageForPhpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageForPhpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageForPhpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void SendOneMessageCompletedEventHandler(object sender, SendOneMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendOneMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendOneMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void GetMessageStatusCompletedEventHandler(object sender, GetMessageStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessageStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessageStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void SendSchaduleMessageCompletedEventHandler(object sender, SendSchaduleMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendSchaduleMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendSchaduleMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void SendSchaduleMessageForPhpCompletedEventHandler(object sender, SendSchaduleMessageForPhpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendSchaduleMessageForPhpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendSchaduleMessageForPhpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void SendCourseMessageCompletedEventHandler(object sender, SendCourseMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendCourseMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendCourseMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void GetCreditCompletedEventHandler(object sender, GetCreditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCreditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCreditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void GetSmsPriceCompletedEventHandler(object sender, GetSmsPriceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSmsPriceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSmsPriceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void SaveContactCompletedEventHandler(object sender, SaveContactCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void GetReciveMessageCompletedEventHandler(object sender, GetReciveMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReciveMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReciveMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void GetUnReciveMessageCountCompletedEventHandler(object sender, GetUnReciveMessageCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUnReciveMessageCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUnReciveMessageCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void SendOneMessageQuicklyCompletedEventHandler(object sender, SendOneMessageQuicklyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendOneMessageQuicklyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendOneMessageQuicklyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591